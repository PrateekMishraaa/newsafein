{"version":3,"file":"static/js/1316.4e9f5299.chunk.js","mappings":"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","sources":["pages/Forum/components/Questions/QuestionCard.jsx","pages/Forum/components/Questions/AllQuestions.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport WriteAnswer from '../../components/Comments/WriteAnswer';\r\nimport Answers from '../../components/Answers/Answers';\r\nimport Questions from '../../components/Questions/Questions';\r\nimport { apiForum } from 'api';\r\n\r\nconst QuestionCard = ({ question, getQuestions }) => {\r\n    const [showAnswer, setShowAnswer] = useState(false);\r\n    const [answers, setAnswers] = useState();\r\n\r\n    const showAnswerHandler = () => {\r\n        if (showAnswer) {\r\n            setShowAnswer(false);\r\n        } else {\r\n            setShowAnswer(true);\r\n        }\r\n    }\r\n\r\n    const getAnswers = async () => {\r\n        try {\r\n            const res = await apiForum.get(`/v1/api/answer?id=${question?.id}`);\r\n            if (res.status === 200) {\r\n                setAnswers(res?.data?.results);\r\n                // console.log(\"Answer Data: \", res);\r\n            }\r\n        } catch (error) {\r\n            // console.log(error.response.data.error);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAnswers();\r\n    }, []);\r\n\r\n    return (\r\n        <>\r\n            <div className='rounded-4 border mb-3 shadow-sm'>\r\n                <Questions\r\n                    showAnswerHandler={showAnswerHandler}\r\n                    showAnswer={showAnswer}\r\n                    question={question}\r\n                    className='border rounded-4'\r\n                    getQuestions={getQuestions}\r\n                    isAnswered={answers?.length}\r\n                />\r\n                {/* {\r\n                    answers?.map((answer) => {\r\n                        return <Answers showAnswer={showAnswer} answer={answer} getQuestions={getQuestions}/>\r\n                    })\r\n                }\r\n                <WriteAnswer questionId={question?.id} getQuestions={getQuestions}/> */}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default QuestionCard;","import React from 'react';\r\nimport QuestionSkeleton from '../Skeleton/QuestionSkeleton';\r\nimport { Badge, Box, Button, ButtonGroup, Divider, FormControl, FormControlLabel, Radio, RadioGroup, Typography } from '@mui/material';\r\nimport { FilterAltTwoTone } from '@mui/icons-material';\r\nimport QuestionCard from './QuestionCard';\r\nimport { LoadingButton } from '@mui/lab';\r\nimport { apiForum } from 'api';\r\nimport ReportContent from '../Modals/ReportContent';\r\nimport { Link, useOutletContext } from 'react-router-dom';\r\n\r\nconst AllQuestions = () => {\r\n    const [search, {\r\n        loading,\r\n        questions,\r\n        pageHeading,\r\n        stats,\r\n        setSort,\r\n        filterCount,\r\n        handleShowFilterBox,\r\n        showFilterBox,\r\n        sortAndFilter,\r\n        setSortAndFilter,\r\n        setFilter,\r\n        setShowFilterBox,\r\n        setPage,\r\n        setPageHeading,\r\n        getQuestions,\r\n        showLoadBtn,\r\n        setLoadMore,\r\n        sort,\r\n        filter,\r\n        page,\r\n        limit,\r\n        offset,\r\n        setQuestions,\r\n        loadMore,\r\n        handleClickOpen,\r\n        setShowLoadBtn\r\n\r\n    }] = useOutletContext();\r\n    // let arr = {\r\n    //     questions, setQuestions, \r\n    //     loading, setLoading,\r\n    //     open, setOpen,\r\n    //     showFilterBox, setShowFilterBox,\r\n    //     pageHeading, setPageHeading,\r\n    //     sort, setSort,\r\n    //     filter, setFilter,\r\n    //     page, setPage,\r\n    //     limit, setLimit,\r\n    //     page, setPage,\r\n\r\n    // };\r\n\r\n    // let state = {\r\n    //     loading,\r\n    //     questions,\r\n    //     pageHeading,\r\n    //     stats,\r\n    //     setSort,\r\n    //     filterCount,\r\n    //     handleShowFilterBox,\r\n    //     showFilterBox,\r\n    //     sortAndFilter,\r\n    //     setSortAndFilter,\r\n    //     setFilter,\r\n    //     setShowFilterBox,\r\n    //     setPage,\r\n    //     setPageHeading,\r\n    //     getQuestions,\r\n    //     showLoadBtn,\r\n    //     setLoadMore,\r\n    //     sort,\r\n    //     filter,\r\n    //     page,\r\n    //     limit,\r\n    //     offset,\r\n    //     setQuestions,\r\n    //     loadMore,\r\n    //     handleClickOpen,\r\n\r\n\r\n    // };\r\n\r\n    // const [questions, setQuestions] = useState();\r\n    // const [loading, setLoading] = useState(true);\r\n    // const [open, setOpen] = useState(false);\r\n    // const [showFilterBox, setShowFilterBox] = useState(false);\r\n    // const [pageHeading, setPageHeading] = useState('Recent Questions');\r\n    // const [sort, setSort] = useState('');\r\n    // const [filter, setFilter] = useState('');\r\n    // const [page, setPage] = useState(1);\r\n    // const [limit, setLimit] = useState(10);\r\n    // const [offset, setOffset] = useState();\r\n    // const [loadMore, setLoadMore] = useState(false);\r\n    // const [showLoadBtn, setShowLoadBtn] = useState(true);\r\n    // const [sortAndFilter, setSortAndFilter] = useState({});\r\n    const [openReport, setOpenReport] = React.useState(false);\r\n    // const [filterCount, setFilterCount] = useState(0);\r\n    // const [stats, setStats] = useState();\r\n\r\n\r\n    // const handleClickOpen = () => {\r\n    //     setOpen(true);\r\n    // };\r\n\r\n    // const getQuestionsByQuery = async () => {\r\n    //     setLoading(true);\r\n    //     try {\r\n    //         const res = await apiForum.get(`/v1/api/query?sort=${sort}&filter=${filter}&page=${page}&limit=${limit}&offset=${offset}`);\r\n    //         if (res.status === 200) {\r\n    //             setQuestions(res?.data?.results);\r\n    //             if (sort) {\r\n    //                 setPageHeading(`${sort.charAt(0).toUpperCase() + sort.slice(1)} Questions`);\r\n    //             }\r\n    //             // console.log(\"Sorted & Filtered Data: \", res);\r\n    //             setLoading(false);\r\n    //             getStats();\r\n    //         }\r\n    //     } catch (error) {\r\n    //         // console.log(error?.response?.data?.error);\r\n\r\n    //     }\r\n    // }\r\n\r\n    // const getQuestions = async () => {\r\n    //     setLoading(true);\r\n    //     pop2.loading();\r\n    //     try {\r\n    //         // const res = await apiForum.get(`/v1/api/questions`);\r\n    //         const res = await apiForum.get(`/v1/api/query?sort=&filter=${filter}&page=${page}&limit=${limit}&offset=${offset}`);\r\n    //         if (res.status === 200) {\r\n    //             setQuestions(res?.data?.results);\r\n    //             setPageHeading(`Recent Questions`);\r\n    //             // console.log(\"Question Data: \", res);\r\n    //             setLoading(false);\r\n    //             getStats();\r\n    //         }\r\n    //     } catch (error) {\r\n    //         // console.log(error.response.data.error);\r\n    //     }\r\n    // }\r\n\r\n    // const handleShowFilterBox = () => {\r\n    //     if (showFilterBox) {\r\n    //         setShowFilterBox(false);\r\n    //     } else {\r\n    //         setShowFilterBox(true);\r\n    //     }\r\n    // }\r\n\r\n    // const getStats = async () => {\r\n    //     try {\r\n    //         const res = await apiForum.get(`/v1/api/question-stats`);\r\n    //         if (res?.status === 200) {\r\n    //             console.log(\"Stats: \", res)\r\n    //             setStats(res?.data?.results);\r\n    //         }\r\n    //     } catch (err) {\r\n    //         console.log(err);\r\n    //     }\r\n    // }\r\n\r\n    // useEffect(() => {\r\n    //     console.log(\"All Questions Components\");\r\n    //     if (sort && filter) {\r\n    //         setFilterCount(2);\r\n    //     } else if (filter || sort) {\r\n    //         setFilterCount(1);\r\n    //     } else {\r\n    //         setFilterCount(0);\r\n    //     }\r\n    //     getQuestionsByQuery();\r\n    // }, [sort, filter]);\r\n\r\n    // useEffect(() => {\r\n    //     setQuestions(search?.questions);\r\n    //     setPageHeading(search?.pageHeading);\r\n    //     setLoading(search?.loading);\r\n    // }, [search]);\r\n\r\n    return (\r\n        <>\r\n            {\r\n                loading ?\r\n                    <>\r\n                        {/* {\r\n                            showWelcome ? \r\n                            <WelcomeForum /> \r\n                            : null\r\n                          } */}\r\n                        <QuestionSkeleton />\r\n                        <QuestionSkeleton />\r\n                        <QuestionSkeleton />\r\n                    </>\r\n                    :\r\n                    questions?.length ?\r\n                        <>\r\n                            <div>\r\n                                {/* <p className='fs-6'>1200 asked today, 34000 asked overall, 432 questions still need answers</p> */}\r\n\r\n                            </div>\r\n                            <div className=\"mb-3\">\r\n                                <div className=\"row align-items-center \">\r\n                                    <div className=\"col\">\r\n                                        <h4>{pageHeading}</h4>\r\n                                        <span className='fst-italic' style={{ fontSize: '12px' }}>Today: {stats?.today} | Total: {stats?.total} | Unanswered: {stats?.unanswered}</span>\r\n                                    </div>\r\n                                    <div className=\"col \">\r\n                                        <Box\r\n                                            sx={{\r\n                                                display: 'flex',\r\n                                                flexWrap: \"wrap\",\r\n                                                flexDirection: 'row',\r\n                                                alignItems: 'center',\r\n                                                justifyContent: 'end',\r\n                                                '& > *': {\r\n                                                    m: 1,\r\n                                                },\r\n                                            }}\r\n\r\n                                        >\r\n                                            <ButtonGroup size=\"small\" aria-label=\"small button group\">\r\n                                                <Button key=\"one\" className='text-capitalize' onClick={() => {\r\n                                                    setSort('newest');\r\n                                                }}>Newest</Button>\r\n                                                <Button key=\"two\" className='text-capitalize' onClick={() => {\r\n                                                    setSort('unanswered');\r\n                                                }}>Unanswered</Button>\r\n                                                <Button key=\"three\" className='text-capitalize' onClick={() => {\r\n                                                    setSort('popular');\r\n                                                }}>Popular</Button>\r\n                                            </ButtonGroup>\r\n                                            <Badge badgeContent={filterCount} color=\"primary\">\r\n                                                <Button size=\"small\" className='text-capitalize' variant=\"outlined\" onClick={handleShowFilterBox}\r\n                                                    startIcon={<FilterAltTwoTone />}>\r\n                                                    Filter\r\n                                                </Button>\r\n                                            </Badge>\r\n                                        </Box>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"container\">\r\n                                    <div className={`row border rounded-3 p-3 ${showFilterBox ? '' : 'd-none'}`}>\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col-lg-4\">\r\n                                                <h6>Filter by</h6>\r\n                                                <FormControl>\r\n                                                    {/* <FormLabel id=\"demo-radio-buttons-group-label\">Filter by</FormLabel> */}\r\n                                                    <RadioGroup\r\n                                                        aria-labelledby=\"filters-radio-label\"\r\n                                                        name=\"filters-radio\"\r\n                                                        defaultValue={sortAndFilter?.filter}\r\n                                                        onChange={e => {\r\n                                                            setSortAndFilter({ ...sortAndFilter, filter: e.target.value })\r\n                                                        }}\r\n                                                    >\r\n                                                        <FormControlLabel value=\"unanswered\" control={<Radio />} label=\"Unanswered\" />\r\n                                                        <FormControlLabel value=\"answered\" control={<Radio />} label=\"Answered\" />\r\n                                                    </RadioGroup>\r\n                                                </FormControl>\r\n                                            </div>\r\n                                            <div className=\"col-lg-4\">\r\n                                                <h6>Sorted by</h6>\r\n                                                <FormControl>\r\n                                                    {/* <FormLabel id=\"demo-radio-buttons-group-label\">Filter by</FormLabel> */}\r\n                                                    <RadioGroup\r\n                                                        aria-labelledby=\"sorting-radio-label\"\r\n                                                        name=\"sorting-radio\"\r\n                                                        defaultValue={sortAndFilter?.sort}\r\n                                                        onChange={e => {\r\n                                                            setSortAndFilter({ ...sortAndFilter, sort: e.target.value })\r\n                                                        }}\r\n                                                    >\r\n                                                        <FormControlLabel value=\"newest\" control={<Radio />} label=\"Newest\" />\r\n                                                        <FormControlLabel value=\"recent-activity\" control={<Radio />} label=\"Recent activity\" />\r\n                                                        <FormControlLabel value=\"highest-votes\" control={<Radio />} label=\"Highest votes\" />\r\n                                                        <FormControlLabel value=\"most-frequent\" control={<Radio />} label=\"Most frequent\" />\r\n                                                        {/* <FormControlLabel value=\"other\" control={<Radio />} label=\"Other\" /> */}\r\n                                                    </RadioGroup>\r\n                                                </FormControl>\r\n                                            </div>\r\n                                            <div className=\"col-lg-4\">\r\n\r\n                                                <div className='mb-5'>\r\n                                                    <h5>Still Confused?</h5>\r\n                                                    <h6>Don't worry! Our topic experts are waiting for you.\r\n                                                        Try EkSathi Now!\r\n                                                    </h6>\r\n                                                    <Link to=\"https://www.eksathi.com\" target='_blank'>\r\n                                                        <Button className='rounded-3 text-capitalize' variant='outlined' color='info' >Connect to Expert</Button>\r\n                                                    </Link>\r\n                                                </div>\r\n                                                <Typography varient=\"subtitle2\" gutterBottom color='grey'>Powered By <Link to='https://www.eksathi.com' target=\"_blank\" className='text-info'>EkSathi</Link></Typography>\r\n                                            </div>\r\n                                        </div>\r\n                                        <Divider className='my-3' />\r\n                                        <div className=\"row\">\r\n                                            <div className=\"col\">\r\n                                                <Button variant='outlined' color=\"success\" className='text-capitalize rounded-3' onClick={() => {\r\n                                                    console.log(sortAndFilter);\r\n                                                    if (sortAndFilter?.sort) {\r\n                                                        setSort(sortAndFilter?.sort);\r\n                                                    }\r\n                                                    if (sortAndFilter?.filter) {\r\n                                                        setFilter(sortAndFilter?.filter);\r\n                                                    }\r\n                                                    setShowFilterBox(false);\r\n                                                }}>Apply</Button></div>\r\n                                            <div className=\"col d-flex justify-content-start justify-content-lg-end mt-2 mt-lg-0\">\r\n                                                <Button variant='outlined' className='text-capitalize mx-3 rounded-3' onClick={() => {\r\n                                                    setSortAndFilter({ ...sortAndFilter, sort: \"\", filter: \"\" });\r\n                                                    setSort('');\r\n                                                    setFilter('');\r\n                                                    setPage(1);\r\n                                                    setShowFilterBox(false);\r\n                                                    setPageHeading(\"Recent Questions\");\r\n                                                }}>Clear Filters</Button>\r\n                                                <Button variant='outlined' className='text-capitalize rounded-3' color='error' onClick={() => setShowFilterBox(false)}>Cancel</Button>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            {questions?.map((question, key) => (\r\n                                <><QuestionCard question={question} key={key} getQuestions={getQuestions} /></>\r\n                            ))}\r\n                            <div className={`d-flex justify-content-center mb-3 ${showLoadBtn ? '' : 'd-none'}`}>\r\n                                <LoadingButton\r\n                                    // size=\"small\"\r\n                                    onClick={async () => {\r\n\r\n                                        setLoadMore(true);\r\n                                        try {\r\n                                            const res = await apiForum.get(`/v1/api/query?sort=${sort}&filter=${filter}&page=${page + 1}&limit=${limit}&offset=${offset}`);\r\n                                            if (res.status === 200) {\r\n                                                if (res?.data?.results?.length) {\r\n\r\n                                                    let data = res?.data?.results;\r\n                                                    setQuestions(questions.concat(data));\r\n\r\n                                                    console.log(\"Loaded More Questions: \", questions);\r\n                                                    setLoadMore(false);\r\n                                                    setPage(page + 1);\r\n                                                } else {\r\n                                                    setLoadMore(false);\r\n                                                    setShowLoadBtn(false);\r\n                                                    setPage(1);\r\n                                                }\r\n                                            }\r\n                                        } catch (error) {\r\n                                            console.log(error?.response?.data?.error);\r\n                                        }\r\n                                    }}\r\n                                    // endIcon={<SendIcon />}\r\n                                    loading={loadMore}\r\n                                    loadingIndicator=\"Loading…\"\r\n                                    // loadingPosition=\"end\"\r\n                                    variant=\"outlined\"\r\n                                    className='text-capitalize fw-bold'\r\n                                >\r\n                                    <span>Load More</span>\r\n                                </LoadingButton>\r\n                            </div>\r\n                        </> :\r\n                        <>\r\n                            <div className=\"d-flex flex-column justify-content-center align-items-center mt-5\">\r\n                                <img src=\"/images/questionnotfound.jpg\" alt=\"\" className='w-100' style={{ maxWidth: \"400px\", objectFit: \"contain\" }} />\r\n                                <h3>No Questions Found</h3>\r\n                                <p>It seems like nobody asked yet, but you can ask now!</p>\r\n                                <Button varient=\"outlined\" className=\"border text-capitalize fs-5 px-4 rounded-3\" size=\"large\" color=\"success\" onClick={handleClickOpen}>Ask Question Now</Button>\r\n                            </div>\r\n                        </>\r\n            }\r\n            <ReportContent open={openReport} setOpen={setOpenReport} />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AllQuestions;"],"names":["_ref","question","getQuestions","showAnswer","setShowAnswer","useState","answers","setAnswers","useEffect","async","res","apiForum","get","concat","id","_res$data","status","data","results","error","getAnswers","_jsx","_Fragment","children","className","Questions","showAnswerHandler","isAnswered","length","AllQuestions","search","loading","questions","pageHeading","stats","setSort","filterCount","handleShowFilterBox","showFilterBox","sortAndFilter","setSortAndFilter","setFilter","setShowFilterBox","setPage","setPageHeading","showLoadBtn","setLoadMore","sort","filter","page","limit","offset","setQuestions","loadMore","handleClickOpen","setShowLoadBtn","useOutletContext","openReport","setOpenReport","React","_jsxs","QuestionSkeleton","style","fontSize","today","total","unanswered","Box","sx","display","flexWrap","flexDirection","alignItems","justifyContent","m","ButtonGroup","size","Button","onClick","Badge","badgeContent","color","variant","startIcon","FilterAltTwoTone","FormControl","RadioGroup","name","defaultValue","onChange","e","_objectSpread","target","value","FormControlLabel","control","Radio","label","Link","to","Typography","varient","gutterBottom","Divider","console","log","map","key","QuestionCard","LoadingButton","_res$data$results","_res$data2","_error$response","_error$response$data","response","loadingIndicator","src","alt","maxWidth","objectFit","ReportContent","open","setOpen"],"sourceRoot":""}