{"version":3,"file":"static/js/5552.78630d07.chunk.js","mappings":"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","sources":["pages/dashboard/components/institute/setting/InstituteEditPassword.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useFormik } from \"formik\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { apiAuth } from \"api\";\r\nimport { useGlobalContext } from \"global/context\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport {\r\n  FormHelperText,\r\n  InputAdornment,\r\n  InputLabel,\r\n  OutlinedInput,\r\n} from \"@mui/material\";\r\nimport useError from \"hooks/useError\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from \"yup\";\r\n\r\nconst InstituteEditPassword = () => {\r\n  const validationSchema = Yup.object({\r\n    oldpassword: Yup.string()\r\n      .required(\"Old Password is required\"),\r\n    password: Yup.string()\r\n      .required(\"New Password is required\")\r\n      .min(8, \"New Password must be at least 8 characters\")\r\n      .matches(\r\n        /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+])[A-Za-z\\d!@#$%^&*()_+]+$/,\r\n        \"New Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character\"\r\n      ),\r\n    confirm_password: Yup.string()\r\n      .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n      .required(\"Confirm New Password is required\"),\r\n  });\r\n  const { userData, token } = useGlobalContext();\r\n  const { ErrorResponder } = useError();\r\n  const [showOldPassword, setShowOldPassword] = React.useState(false);\r\n  const [showPassword, setShowPassword] = React.useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = React.useState(false);\r\n  const handleClickShowPassword = (setState) => setState((show) => !show);\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  //Reset Password\r\n  const passwordformik = useFormik({\r\n    initialValues: {\r\n      oldpassword: \"\",\r\n      password: \"\",\r\n      confirm_password: \"\",\r\n    },\r\n    validationSchema,\r\n    onSubmit: async (values, { resetForm }) => {\r\n      toast.dismiss();\r\n      toast.loading(\"Updating Password please wait.\");\r\n      const formData = new FormData();\r\n      formData.append(\"password\", values.oldpassword);\r\n      formData.append(\"newpassword\", values.password);\r\n      formData.append(\"type\", userData.type);\r\n      formData.append(\"email\", userData.email);\r\n      if (token) {\r\n        try {\r\n          const res = await apiAuth.post(\r\n            `/auth/changepassword?id=${userData.id}`,\r\n            formData,\r\n            {\r\n              headers: {\r\n                Authorization: token,\r\n              },\r\n            }\r\n          );\r\n          switch (res?.data?.status) {\r\n            case \"success\":\r\n              toast.dismiss();\r\n              toast.success(res.data.message);\r\n              resetForm();\r\n              break;\r\n            case \"warning\":\r\n              toast.dismiss();\r\n              toast.warning(res.data.message);\r\n              break;\r\n            case \"error\":\r\n              toast.dismiss();\r\n              toast.error(res.data.message);\r\n              break;\r\n            default:\r\n              toast.dismiss();\r\n              toast(res.data.message);\r\n              break;\r\n          }\r\n        } catch (error) {\r\n          ErrorResponder(error);\r\n        }\r\n      }\r\n      resetForm()\r\n    },\r\n  });\r\n  return (\r\n    <>\r\n      <form onSubmit={passwordformik.handleSubmit}>\r\n        <div className=\"row justify-content-between  gy-4 mt-2\">\r\n          <div className=\"col-12 col-lg-6\">\r\n            <h6>Change Account Password</h6>\r\n          </div>\r\n          <div className=\"col-12 col-lg-6\">\r\n            <div className=\"row g-2\">\r\n              <div className=\"col-12\">\r\n                <FormControl variant=\"outlined\" fullWidth>\r\n                  <InputLabel htmlFor=\"outlined-adornment-password\">\r\n                    Old Password\r\n                  </InputLabel>\r\n                  <OutlinedInput\r\n                    id=\"oldpassword\"\r\n                    name=\"oldpassword\"\r\n                    label=\"Old Password\"\r\n                    type={showOldPassword ? \"text\" : \"password\"}\r\n                    value={passwordformik.values.oldpassword}\r\n                    onChange={passwordformik.handleChange}\r\n                    error={\r\n                      passwordformik.touched.oldpassword &&\r\n                      Boolean(passwordformik.errors.oldpassword)\r\n                    }\r\n                    endAdornment={\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                          aria-label=\"toggle password visibility\"\r\n                          onClick={() =>\r\n                            handleClickShowPassword(setShowOldPassword)\r\n                          }\r\n                          onMouseDown={handleMouseDownPassword}\r\n                          edge=\"end\"\r\n                        >\r\n                          {showOldPassword ? <VisibilityOff /> : <Visibility />}\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    }\r\n                  />\r\n                  <FormHelperText className=\"text-danger\">\r\n                    {passwordformik.touched.oldpassword &&\r\n                      passwordformik.errors.oldpassword}\r\n                  </FormHelperText>\r\n                </FormControl>\r\n              </div>\r\n              <div className=\"col-12\">\r\n                <FormControl variant=\"outlined\" fullWidth>\r\n                  <InputLabel htmlFor=\"outlined-adornment-password\">\r\n                    New Password\r\n                  </InputLabel>\r\n                  <OutlinedInput\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    label=\"New Password\"\r\n                    type={showPassword ? \"text\" : \"password\"}\r\n                    value={passwordformik.values.password}\r\n                    onChange={passwordformik.handleChange}\r\n                    error={\r\n                      passwordformik.touched.password &&\r\n                      Boolean(passwordformik.errors.password)\r\n                    }\r\n                    endAdornment={\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                          aria-label=\"toggle password visibility\"\r\n                          onClick={() =>\r\n                            handleClickShowPassword(setShowPassword)\r\n                          }\r\n                          onMouseDown={handleMouseDownPassword}\r\n                          edge=\"end\"\r\n                        >\r\n                          {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    }\r\n                  />\r\n                  <FormHelperText className=\"text-danger\">\r\n                    {passwordformik.touched.password &&\r\n                      passwordformik.errors.password}\r\n                  </FormHelperText>\r\n                </FormControl>\r\n              </div>\r\n              <div className=\"col-12\">\r\n                <FormControl variant=\"outlined\" fullWidth>\r\n                  <InputLabel htmlFor=\"outlined-adornment-password\">\r\n                    Confirm New Password\r\n                  </InputLabel>\r\n                  <OutlinedInput\r\n                    id=\"confirm_password\"\r\n                    name=\"confirm_password\"\r\n                    label=\"Confirm New Password\"\r\n                    type={showConfirmPassword ? \"text\" : \"password\"}\r\n                    value={passwordformik.values.confirm_password}\r\n                    onChange={passwordformik.handleChange}\r\n                    error={\r\n                      passwordformik.touched.confirm_password &&\r\n                      Boolean(passwordformik.errors.confirm_password)\r\n                    }\r\n                    endAdornment={\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton\r\n                          aria-label=\"toggle password visibility\"\r\n                          onClick={() =>\r\n                            handleClickShowPassword(setShowConfirmPassword)\r\n                          }\r\n                          onMouseDown={handleMouseDownPassword}\r\n                          edge=\"end\"\r\n                        >\r\n                          {showConfirmPassword ? (\r\n                            <VisibilityOff />\r\n                          ) : (\r\n                            <Visibility />\r\n                          )}\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    }\r\n                  />\r\n                  <FormHelperText className=\"text-danger\">\r\n                    {passwordformik.touched.confirm_password &&\r\n                      passwordformik.errors.confirm_password}\r\n                  </FormHelperText>\r\n                </FormControl>\r\n              </div>\r\n              <div className=\"col-12\">\r\n                <Button\r\n                  color=\"warning\"\r\n                  variant=\"contained\"\r\n                  className=\"py-3\"\r\n                  size=\"large\"\r\n                  fullWidth\r\n                  type=\"submit\"\r\n                >\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default InstituteEditPassword;\r\n"],"names":["InstituteEditPassword","validationSchema","Yup","oldpassword","required","password","min","matches","confirm_password","oneOf","userData","token","useGlobalContext","ErrorResponder","useError","showOldPassword","setShowOldPassword","React","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","handleClickShowPassword","setState","show","handleMouseDownPassword","event","preventDefault","passwordformik","useFormik","initialValues","onSubmit","async","values","_ref","resetForm","toast","dismiss","loading","formData","FormData","append","type","email","_res$data","res","apiAuth","post","concat","id","headers","Authorization","data","status","success","message","warning","error","_jsx","_Fragment","children","handleSubmit","_jsxs","className","FormControl","variant","fullWidth","InputLabel","htmlFor","OutlinedInput","name","label","value","onChange","handleChange","touched","Boolean","errors","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","edge","VisibilityOff","Visibility","FormHelperText","Button","color","size"],"sourceRoot":""}