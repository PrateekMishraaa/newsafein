{"version":3,"file":"static/js/2006.8810c025.chunk.js","mappings":"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","sources":["pages/dashboard/components/student/EditProfile/EditPassword.jsx"],"sourcesContent":["import React from \"react\";\r\nimport * as yup from \"yup\";\r\nimport { useFormik } from \"formik\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Button from \"@mui/material/Button\";\r\nimport { Visibility, VisibilityOff } from \"@mui/icons-material\";\r\nimport FormControl from \"@mui/material/FormControl\";\r\nimport { toast } from \"react-toastify\";\r\nimport { apiAuth } from \"api\";\r\nimport { FormHelperText, InputAdornment, InputLabel, OutlinedInput } from \"@mui/material\";\r\nimport Swal from \"sweetalert2\";\r\nimport { useGlobalContext } from \"global/context\";\r\nimport useError from \"hooks/useError\";\r\nimport SimpleBreadCrumb from \"components/ui/breadcrumb/SimpleBreadCrumb\";\r\nimport * as Yup from \"yup\";\r\n\r\n\r\nconst EditPassword = () => {\r\n  const validationSchema = Yup.object({\r\n    oldpassword: Yup.string()\r\n      .required(\"Old Password is required\"),\r\n    password: Yup.string()\r\n      .required(\"New Password is required\")\r\n      .min(8, \"New Password must be at least 8 characters\")\r\n      .matches(\r\n        /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*()_+])[A-Za-z\\d!@#$%^&*()_+]+$/,\r\n        \"New Password must contain at least one uppercase letter, one lowercase letter, one number, and one special character\"\r\n      ),\r\n    confirm_password: Yup.string()\r\n      .oneOf([Yup.ref(\"password\"), null], \"Passwords must match\")\r\n      .required(\"Confirm New Password is required\"),\r\n  });\r\n\r\n\r\n  const { ErrorResponder } = useError();\r\n  const { userData, token } = useGlobalContext();\r\n  // password eye\r\n  const [showOldPassword, setShowOldPassword] = React.useState(false);\r\n  const [showPassword, setShowPassword] = React.useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = React.useState(false);\r\n  const handleClickShowPassword = (setState) => setState((show) => !show);\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  //Reset Password\r\n  const passwordformik = useFormik({\r\n    initialValues: {\r\n      oldpassword: \"\",\r\n      password: \"\",\r\n      confirm_password: \"\",\r\n    },\r\n    validationSchema,\r\n    onSubmit: async (values, { resetForm }) => {\r\n      toast.loading();\r\n      toast.dismiss();\r\n      toast.loading(\"Updating Password please wait.\");\r\n      // toast.loading(\"Changing Password\");\r\n      const formData = new FormData();\r\n      formData.append(\"password\", values.oldpassword);\r\n      formData.append(\"newpassword\", values.password);\r\n      formData.append(\"type\", userData.type);\r\n      formData.append(\"email\", userData.email);\r\n      if (token) {\r\n        try {\r\n          const res = await apiAuth.post(`/auth/changepassword?id=${userData.id}`, formData, {\r\n            headers: {\r\n              Authorization: token,\r\n            },\r\n          });\r\n          if (res.status === 200) {\r\n            toast.dismiss();\r\n            toast.success(\"Password Changed Successfully\");\r\n            resetForm();\r\n          }\r\n        } catch (error) {\r\n          ErrorResponder(error);\r\n        }\r\n      }\r\n      resetForm()\r\n    },\r\n  });\r\n  return (\r\n    <>\r\n      <form onSubmit={passwordformik.handleSubmit}>\r\n        <div className=\"row gy-4\">\r\n          <div className=\"col-12 col-lg-6\">\r\n            <h6>Change Account Password</h6>\r\n          </div>\r\n          <div className=\"col-12 col-lg-6\">\r\n            <div className=\"row g-3\">\r\n              <div className=\"col-12\">\r\n                <FormControl variant=\"outlined\" fullWidth>\r\n                  <InputLabel htmlFor=\"outlined-adornment-password\">Old Password</InputLabel>\r\n                  <OutlinedInput\r\n                    id=\"oldpassword\"\r\n                    label=\"Old Password\"\r\n                    name=\"oldpassword\"\r\n                    type={showOldPassword ? \"text\" : \"password\"}\r\n                    value={passwordformik.values.oldpassword}\r\n                    onChange={passwordformik.handleChange}\r\n                    error={passwordformik.touched.oldpassword && Boolean(passwordformik.errors.oldpassword)}\r\n                    endAdornment={\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton aria-label=\"toggle password visibility\" onClick={() => handleClickShowPassword(setShowOldPassword)} onMouseDown={handleMouseDownPassword} edge=\"end\">\r\n                          {showOldPassword ? <VisibilityOff /> : <Visibility />}\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    }\r\n                  />\r\n                  <FormHelperText className=\"text-danger\">{passwordformik.touched.oldpassword && passwordformik.errors.oldpassword}</FormHelperText>\r\n                </FormControl>\r\n              </div>\r\n              <div className=\"col-12\">\r\n                <FormControl variant=\"outlined\" fullWidth>\r\n                  <InputLabel htmlFor=\"outlined-adornment-password\">Password</InputLabel>\r\n                  <OutlinedInput\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    label=\"Password\"\r\n                    type={showPassword ? \"text\" : \"password\"}\r\n                    value={passwordformik.values.password}\r\n                    onChange={passwordformik.handleChange}\r\n                    error={passwordformik.touched.password && Boolean(passwordformik.errors.password)}\r\n                    endAdornment={\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton aria-label=\"toggle password visibility\" onClick={() => handleClickShowPassword(setShowPassword)} onMouseDown={handleMouseDownPassword} edge=\"end\">\r\n                          {showPassword ? <VisibilityOff /> : <Visibility />}\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    }\r\n                  />\r\n                  <FormHelperText className=\"text-danger\">{passwordformik.touched.password && passwordformik.errors.password}</FormHelperText>\r\n                </FormControl>\r\n              </div>\r\n              <div className=\"col-12\">\r\n                <FormControl variant=\"outlined\" fullWidth>\r\n                  <InputLabel htmlFor=\"outlined-adornment-password\">Confirm Password</InputLabel>\r\n                  <OutlinedInput\r\n                    id=\"confirm_password\"\r\n                    name=\"confirm_password\"\r\n                    label=\"Confirm Password\"\r\n                    type={showConfirmPassword ? \"text\" : \"password\"}\r\n                    value={passwordformik.values.confirm_password}\r\n                    onChange={passwordformik.handleChange}\r\n                    error={passwordformik.touched.confirm_password && Boolean(passwordformik.errors.confirm_password)}\r\n                    endAdornment={\r\n                      <InputAdornment position=\"end\">\r\n                        <IconButton aria-label=\"toggle password visibility\" onClick={() => handleClickShowPassword(setShowConfirmPassword)} onMouseDown={handleMouseDownPassword} edge=\"end\">\r\n                          {showConfirmPassword ? <VisibilityOff /> : <Visibility />}\r\n                        </IconButton>\r\n                      </InputAdornment>\r\n                    }\r\n                  />\r\n                  <FormHelperText className=\"text-danger\">{passwordformik.touched.confirm_password && passwordformik.errors.confirm_password}</FormHelperText>\r\n                </FormControl>\r\n              </div>\r\n              <div className=\"col-12\">\r\n                <Button color=\"warning\" variant=\"contained\" className=\"py-3\" size=\"large\" fullWidth type=\"submit\">\r\n                  Submit\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\nexport default EditPassword;\r\n"],"names":["EditPassword","validationSchema","Yup","oldpassword","required","password","min","matches","confirm_password","oneOf","ErrorResponder","useError","userData","token","useGlobalContext","showOldPassword","setShowOldPassword","React","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","handleClickShowPassword","setState","show","handleMouseDownPassword","event","preventDefault","passwordformik","useFormik","initialValues","onSubmit","async","values","_ref","resetForm","toast","loading","dismiss","formData","FormData","append","type","email","apiAuth","post","concat","id","headers","Authorization","status","success","error","_jsx","_Fragment","children","handleSubmit","_jsxs","className","FormControl","variant","fullWidth","InputLabel","htmlFor","OutlinedInput","label","name","value","onChange","handleChange","touched","Boolean","errors","endAdornment","InputAdornment","position","IconButton","onClick","onMouseDown","edge","VisibilityOff","Visibility","FormHelperText","Button","color","size"],"sourceRoot":""}